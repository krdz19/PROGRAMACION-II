/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package apguias;

import java.awt.Color;

/**
 *
 * @author kevindonaldo
 */
public class teoria extends javax.swing.JFrame {

    /**
     * Creates new form teoria
     */
    public teoria() {
        initComponents();
        this.getContentPane().setBackground(Color.yellow);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        jLabel1.setText("TEORIA");

        jButton1.setBackground(new java.awt.Color(255, 153, 204));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton1.setText("GUIA 1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(51, 255, 51));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton2.setText("GUIA 2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 204, 204));
        jButton3.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        jButton3.setText("REGRESAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 0, 0));
        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton4.setText("SALIR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane1.setViewportView(jTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 352, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(182, 182, 182))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(345, 345, 345))
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          jTextArea.setText("1.Qué es la programación orientada a objetos (POO)?\n" +
"Es un paradigma de programación que viene a innovar la forma de obtener resultados. Los objetos manipulan los \ndatos de entrada para la obtención de datos de salida específicos, donde cada objeto ofrece una funcionalidad especial.\n" +
"\n" +
"2.¿Cuáles son los conceptos y nociones básicas de la POO?\n" +
"3.Explique de manera clara que es:\n" +
"\n" +
"-Polimorfismo: \n" +
"Se refiere a la propiedad por la que es posible enviar mensajes sintácticamente iguales a objetos de tipos distintos. \nEl único requisito que deben cumplir los objetos que se usan de \nmanera polimórfica es saber responder al mensaje que se les envía.\n" +
"                                                                                        \n" +
"-Abstracción:\n" +
"Consiste en aislar un elemento aislador su programa inválido que lo acompaña.\n" +
"Expresa las características esenciales de un objeto, las cuales distinguen al objeto de los demás.\n" +
"\n" +
"-Herencia:\n" +
"\n" +
"Un tipo de objeto de alto nivel puede especializarse en tipos de objeto de bajo nivel. \nUn tipo de objetos puede tener subtipos. Por ejemplo, el tipo de objeto persona puede tener subtipos estudiante y empleado. \nA su vez, el tipo de objeto estudiante puede tener como subtipo estudiante de pregrado y estudiante de postgrado, mientras que empleado puede tener como subtipo a académico y administrativo. Existe de este modo una jerarquía  de tipos, subtipos, subsubtipos, etc.  \n" +
"\n" +
"-Encapsulamiento:\n" +
"El empaque conjunto de datos y método se llama encapsulado. El objeto esconde sus datos de los demás objetos y \npermite el acceso a los datos mediante sus propios métodos.\n" +
"\n" +
"4.¿Por qué es preferible usar POO a programación estructurada?\n" +
"Es preferible porque Java posee:\n" +
"Lenguaje simple, Lenguaje orientado a objetos, Aplicaciones distribuidas, Interpretado y compilado y es segura.\n" +
"\n" +
"5.¿Qué ventajas posee usar JAVA  en el desarrollo de aplicaciones?\n" +
"\n" +
"\n" +
"6.Desglose cada uno de los siguientes conceptos en el ámbito de la POO:\n" +
"-Clase:\n" +
"Esta se refiere a la implantación en software de un tipo de objeto.\n" +
"El tipo de objeto es una noción de concepto.\n" +
"\n" +
"\n" +
"\n" +
"-Método:\n" +
"Los métodos especifican la forma en que se controlan los datos de un objeto. \nLos métodos en un tipo de objeto solo hacen referencia a la estructura de datos de ese tipo de objeto.  \n" +
"-Constructor:\n" +
"Es u método especial de una clase que se llama automáticamente siempre que se declara un objeto de esa clase. \nSu función es inicializar el objeto y sirve para asegurarnos que los objetos siempre contengan valores válidos. \n" +
"-Librería:\n" +
"Es un conjunto de clases que poseen una serie de métodos y atributos. Lo realmente interesante de estas librerías para JAVA es que facilitan muchas operaciones.\n" +
"-Registro:\n" +
"\n" +
"-Dato:\n" +
"Son los tipos de datos primitivos ( int, boolean…), y objeto( String, array o arreglo…).\n" +
"-Valor:\n" +
"Contenido que se mueve a través de las variables utilizadas.\n" +
"\n" +
"7.¿Cuáles son las características principales de los siguientes tipos de datos? (Limitaciones, posibilidades, uso, etc.)\n" +
"-int.\n" +
"-double\n" +
"-String\n" +
"-Object\n" +
"-Char\n" +
"\n" +
"8.¿Qué es la clase math en JAVA?\n" +
"En general es la que nos aporta todas las operaciones matemáticas.\n" +
"9.¿Qué es una base de datos?");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTextArea.setText("1.¿Qué es un vector dentro de JAVA?\n" +
"2.¿Qué es un array dentro de JAVA?\n" +
"Un array o arreglo es una secuencia de datos del mismo tipo. Los datos se llaman elementos del array y se numeran \nconsecutivamente 0,1,2,3…El tipo de elementos almacenados en el array puede ser cualquier dato simple de Java o de un tipo previamente declarado como una clase. \n" +
"3.¿Cómo se diferencia un vector de un array?\n" +
"Es de aclarar que ambos almacenan.\n" +
"Sus diferencias son:\n" +
"EL array es estático y el vector dinámico.\n" +
"El array solo almacena un tipo de datos, el vector varios tipos de datos.\n" +
"El array no tiene métodos ni clases.\n" +
"El vector tiene métodos.\n" +
"El vector es más pesado porque contiene métodos clases.\n" +
"4.Liste los diferentes tipos de vectores y arrays que pueden utilizarse en JAVA (int vector()..)\n" +
"5.¿Qué utilidad concreta tiene cada una de estas estructuras de datos dentro de la programación?\n" +
"6.¿Qué es el tipo de datos object dentro de JAVA?\n" +
"Todas las clases son en realidad subclases de una clase mas amplia; la clase Object. Esta clase incluye todos \nlos objetos (los lectores de archivos, las tortuga, los arreglos, loa glyphs, etc.) Por lo tanto siempre es posible colocar cualquier objeto en donde se espera una expresión de tipo object.\n" +
"7.¿Qué es una matriz y que tipo de datos maneja?\n" +
"Una matriz es una tabla bidimensional de números, estas pueden sumarse y multiplicarse .");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(teoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(teoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(teoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(teoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new teoria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    // End of variables declaration//GEN-END:variables
}
